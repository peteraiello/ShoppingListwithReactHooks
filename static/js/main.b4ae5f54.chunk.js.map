{"version":3,"sources":["ListInput/ListInput.js","ListOutput/ListOutput.js","App.js","serviceWorker.js","index.js"],"names":["listInput","props","icon","faPlusSquare","className","onSubmit","submit","type","placeholder","value","inputValue","onChange","change","listOutput","faMinusSquare","listFruits","items","map","fruit","index","key","onClick","delete","App","useState","fruits","setFruit","inputVal","input","setInput","ListOutput","list","splice","ListInput","event","target","newValue","console","log","push","preventDefault","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAuBeA,EAlBG,SAACC,GAEf,IAAMC,EAAO,kBAAC,IAAD,CAAiBA,KAAOC,MAIrC,OACI,yBAAKC,UAAU,aACX,0BAAMC,SAAUJ,EAAMK,QAClB,+BACI,2BAAOF,UAAU,OAAOG,KAAK,OAAOC,YAAY,oBAAoBC,MAAOR,EAAMS,WAAYC,SAAUV,EAAMW,SAC7G,4BAAQR,UAAU,SAASG,KAAK,SAASE,MAAM,OAAOP,OCQ3DW,EAnBI,SAACZ,GAEhB,IAAMC,EAAO,kBAAC,IAAD,CAAiBA,KAAOY,MAE/BC,EAAad,EAAMe,MAAMC,KAAI,SAACC,EAAOC,GACvC,OAAO,wBAAIC,IAAKD,GAAQD,EAAjB,IAAwB,0BAAMG,QAAS,kBAAMpB,EAAMqB,OAAOH,IAAQf,UAAU,QACjFF,OAIP,OACC,yBAAKE,UAAU,cACZ,4BACMW,KCRPQ,G,kBAAM,WAAO,IAAD,EAEUC,mBAAS,CAC/BC,OAAQ,CAAC,UAAW,SAAU,YAHlB,mBAETP,EAFS,KAEFQ,EAFE,OAOUF,mBAAS,CACjCG,SAAU,KARI,mBAOTC,EAPS,KAOFC,EAPE,KAmChB,OACE,yBAAKzB,UAAU,OACb,wBAAIA,UAAU,aAAd,iBAEA,kBAAC0B,EAAD,CAAYd,MAAOE,EAAMO,OAAQH,OAXlB,SAACH,GAClB,IAAMY,EAAOb,EAAMO,OACnBM,EAAKC,OAAOb,EAAO,GACnBO,EAAS,CAACD,OAAQM,OAShB,kBAACE,EAAD,CAAWvB,WAAYkB,EAAMD,SAAUf,OA5BrB,SAACsB,GACrBL,EAAS,CACPF,SAAUO,EAAMC,OAAO1B,SA0BuCH,OAtB5C,SAAC4B,GACrB,IAAME,EAAWR,EAAMD,SACvBU,QAAQC,IAAIF,GACZlB,EAAMO,OAAOc,KAAKH,GAClBP,EAAS,CACPF,SAAU,KAEZO,EAAMM,uBAoBVC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEzBpB,QC7CKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFR,SAASC,eAAe,SDyHpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.b4ae5f54.chunk.js","sourcesContent":["import React from 'react';\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconst listInput = (props) => {\n\n    const icon = <FontAwesomeIcon icon={ faPlusSquare } />;\n\n\n\n    return(\n        <div className=\"listInput\">\n            <form onSubmit={props.submit}>\n                <label>\n                    <input className=\"text\" type=\"text\" placeholder=\"add some fruit...\" value={props.inputValue} onChange={props.change}></input>\n                    <button className=\"button\" type=\"submit\" value=\"add\">{icon}</button> \n                </label>\n            </form>\n        </div>\n    )\n}\n\nexport default listInput;","import React from 'react';\nimport { faMinusSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\nconst listOutput = (props) => {\n\n    const icon = <FontAwesomeIcon icon={ faMinusSquare } />;\n\n    const listFruits = props.items.map((fruit, index) => {\n        return <li key={index}>{fruit} <span onClick={() => props.delete(index)} className=\"icon\">\n        { icon }\n        </span></li>\n    })\n\n   return(\n    <div className=\"listOutput\">\n       <ul>\n           { listFruits } \n       </ul>\n    </div>\n   )\n}\n\nexport default listOutput;","import React, { useState }  from 'react';\nimport { render } from \"react-dom\";\n\nimport ListInput from './ListInput/ListInput';\nimport ListOutput from './ListOutput/ListOutput';\n\nimport './App.css';\nimport './ListOutput/ListOutput.css';\nimport './ListInput/ListInput.css';\n\nconst App = () => {\n\n  const [fruit, setFruit] = useState({\n      fruits: ['bananas', 'apples', 'lemons']\n    } \n  );\n\n  const [input, setInput] = useState({\n    inputVal: ''\n    }\n  );\n\n  const changeHandler = (event) => {\n    setInput({\n      inputVal: event.target.value\n    })\n  }\n\n  const submitHandler = (event) => {\n    const newValue = input.inputVal;\n    console.log(newValue);\n    fruit.fruits.push(newValue);\n    setInput({\n      inputVal: ''\n    })\n    event.preventDefault();\n  }\n\n  const deleteItem = (index) => {\n    const list = fruit.fruits;\n    list.splice(index, 1);\n    setFruit({fruits: list})\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h3 className=\"app-title\">Shopping List</h3>\n      \n      <ListOutput items={fruit.fruits} delete={deleteItem}/>\n      <ListInput inputValue={input.inputVal} change={changeHandler} submit={submitHandler}/>\n    </div>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}